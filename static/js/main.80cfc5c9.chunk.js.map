{"version":3,"sources":["utils/items.js","utils/scoring.js","Feed.js","index.js"],"names":["makeId","length","result","characters","charactersLength","i","charAt","Math","floor","random","getRandomColor","r","createItem","seed","createdAt","id","reactions","comments","updatedAt","color","getTrendingRate","item","params","REACTIONS_TRENDING_WEIGHT","TRENDING_NORM","getRevertedNorm","value","norm","getItemScores","items","UPDATE_NORM","CREATE_NORM","UPDATE_WEIGHT","CREATION_WEIGHT","TRENDING_WEIGHT","maxTrendingRate","max","map","getMaxTrendingRate","scores","trendingRate","trendingScore","updateScore","createScore","totalScore","trendingGroups","Set","sort","a","b","numberOfGroups","trendingOrderScore","indexOf","totalOrderScore","Feed","props","state","algoParamNames","itemsCount","n","newItem","name","this","setState","selected","createItems","itemId","update","itemScores","disabled","isOrderedTrending","className","style","borderLeft","toFixed","onClick","display","justifyContent","type","min","onChange","e","newValue","parseInt","target","updateItem","Object","values","itemScores_ordered_trending","entries","filter","key","includes","step","updateParam","parseFloat","position","right","renderItems","find","data","y","layout","width","height","title","showlegend","xaxis","showticklabels","yaxis","dtick","config","displayModeBar","editable","textAlign","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80cfc5c9.chunk.js","sourcesContent":["function makeId(length = 10) {\n    var result = \"\";\n    var characters =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\nfunction getRandomColor() {\n    var r = function () {\n        return Math.floor(Math.random() * 256)\n    };\n    return \"rgba(\" + r() + \",\" + r() + \",\" + r() + \", 0.6)\";\n}\n\nexport const createItem = (seed) => {\n    const createdAt = 2 + Math.floor(Math.random() * seed);\n\n    return {\n        id: makeId(),\n        reactions: Math.floor(Math.random() * 10 * seed),\n        comments: Math.floor(Math.random() * 10 * seed),\n        createdAt,\n        updatedAt: Math.floor(Math.random() * createdAt),\n        color: getRandomColor()\n    };\n}\n","export const getTrendingRate = (item, params) => {\n    const {reactions = 0, comments = 0} = item;\n    const {REACTIONS_TRENDING_WEIGHT, TRENDING_NORM} = params;\n\n    return (reactions * REACTIONS_TRENDING_WEIGHT + comments) / TRENDING_NORM;\n}\n\nexport const getMaxTrendingRate = (items, params) => {\n    return Math.max(0, ...items.map((i) => getTrendingRate(i, params)));\n}\n\n\nconst getNorm = (value, norm) => {\n    return value >= norm\n        ? 1\n        : value <= 0\n            ? 0\n            : value / norm;\n}\n\nconst getRevertedNorm = (value, norm) => {\n    return value >= norm\n        ? 0\n        : value <= 0\n            ? 1\n            : 1 - value / norm;\n}\n\n\nexport const getItemScores = (items, params) => {\n    const {UPDATE_NORM, CREATE_NORM, UPDATE_WEIGHT, CREATION_WEIGHT, TRENDING_WEIGHT} = params;\n    const maxTrendingRate = getMaxTrendingRate(items, params);\n\n    let scores = items.map(item => {\n        const {updatedAt, createdAt} = item;\n        const result = {item};\n\n        result.trendingRate = getTrendingRate(item, params);\n        result.trendingScore = getNorm(result.trendingRate, maxTrendingRate)\n        result.updateScore = getRevertedNorm(updatedAt, UPDATE_NORM);\n        result.createScore = getRevertedNorm(createdAt, CREATE_NORM)\n        result.totalScore =\n            CREATION_WEIGHT * result.createScore +\n            UPDATE_WEIGHT * result.updateScore +\n            TRENDING_WEIGHT * result.trendingScore;\n\n        return result;\n    })\n\n    const trendingGroups = [...new Set(scores.map(({trendingRate}) => trendingRate))].sort((a,b) => a - b);\n    const numberOfGroups = trendingGroups.length;\n\n    scores = scores.map((result) => {\n        result.trendingOrderScore = (trendingGroups.indexOf(result.trendingRate) + 1) / numberOfGroups\n        result.totalOrderScore =\n            CREATION_WEIGHT * result.createScore +\n            UPDATE_WEIGHT * result.updateScore +\n            TRENDING_WEIGHT * result.trendingOrderScore;\n\n        return result;\n    })\n\n    scores.maxTrendingRate = maxTrendingRate;\n\n    return scores;\n}\n\n","import Plot from 'react-plotly.js';\nimport React from 'react';\nimport { createItem } from './utils/items';\nimport { getItemScores } from './utils/scoring';\n\n\nexport class Feed extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            UPDATE_WEIGHT: 1,\n            CREATION_WEIGHT: 1,\n            TRENDING_WEIGHT: 1,\n            CREATE_NORM: 15,\n            UPDATE_NORM: 5,\n            TRENDING_NORM: 1000,\n            REACTIONS_TRENDING_WEIGHT: 1 / 5,\n            algoParamNames: [\n                'UPDATE_WEIGHT',\n                'CREATION_WEIGHT',\n                'TRENDING_WEIGHT',\n                'CREATE_NORM',\n                'UPDATE_NORM',\n                'TRENDING_NORM',\n                'REACTIONS_TRENDING_WEIGHT'\n            ],\n            items: {},\n            itemsCount: 15,\n        };\n    }\n\n    createItems(n = 15) {\n        const items = {};\n\n        const newItem = {\n            id: \"New\",\n            reactions: 0,\n            comments: 0,\n            createdAt: 0,\n            updatedAt: 0,\n            name: \"new item\",\n            color: 'red',\n        }\n\n        for (let i = 0; i < n; i++) {\n            const item = i === 0 ? newItem : createItem(this.state.CREATE_NORM);\n\n            items[item.id] = item;\n        }\n\n        this.setState({items, selected: newItem.id});\n    }\n\n    componentDidMount() {\n        this.createItems()\n    }\n\n    updateItem(itemId, update) {\n        this.setState({\n            items: {\n                ...this.state.items,\n                [itemId]: {\n                    ...this.state.items[itemId],\n                    ...update,\n                },\n            },\n        });\n    }\n\n    updateParam(name, value) {\n        this.setState({\n            ...this.state,\n            [name]: value,\n        });\n    }\n\n    renderItems(itemScores, disabled = false, isOrderedTrending = false) {\n        return (\n            <ol>\n                {itemScores.map(\n                    (\n                        {\n                            createScore,\n                            item,\n                            totalOrderScore,\n                            totalScore,\n                            trendingOrderScore,\n                            trendingRate,\n                            trendingScore,\n                            updateScore,\n                        },\n                        i\n                    ) => (\n                        <li\n                            key={i}\n                            className={item.id === this.state.selected ? \"selected\" : \"\"}\n                            style={{borderLeft: `15px ${item.color} solid`}}\n                        >\n                            <h2>\n                                {item.name && <span className=\"name\">[{item.name}]</span>}\n                                TotalScore: {(isOrderedTrending ? totalOrderScore : totalScore).toFixed(6)}\n                            </h2>\n                            <h3><u>Trending\n                                Score {(isOrderedTrending ? trendingOrderScore : trendingScore).toFixed(5)}</u></h3>\n                            <h3>Update Score {updateScore.toFixed(5)}</h3>\n                            <h3>Publish Score {createScore.toFixed(5)}</h3>\n\n                            {item.id !== this.state.selected\n                                ? (<button className='selectButton'\n                                           onClick={() => {\n                                               this.setState({selected: item.id})\n                                           }}\n                                >Select</button>)\n                                : null\n                            }\n\n                            <hr/>\n\n                            <b><i style={{color: item.color}}>{item.id}</i></b>\n\n                            <div style={{display: 'flex', justifyContent: 'space-around'}}>\n                                <div>\n                                    <div>\n                                        <small>Created</small>\n                                        <input\n                                            disabled={disabled}\n                                            type=\"number\"\n                                            value={item.createdAt}\n                                            min={0}\n                                            onChange={(e) => {\n                                                const newValue = parseInt(e.target.value);\n                                                this.updateItem(item.id, {\n                                                    createdAt: newValue,\n                                                    updatedAt:\n                                                        newValue < item.updatedAt ? newValue : item.updatedAt,\n                                                });\n                                            }}\n                                        />\n                                        <i>days ago{' '}{!disabled ? `(max:${this.state.CREATE_NORM})` : ''}</i>\n                                    </div>\n\n                                    <div>\n                                        <small>Updated</small>\n                                        <input\n                                            disabled={disabled}\n                                            type=\"number\"\n                                            value={item.updatedAt}\n                                            min={0}\n                                            max={item.createdAt}\n                                            onChange={(e) => {\n                                                this.updateItem(item.id, {\n                                                    updatedAt: parseInt(e.target.value),\n                                                });\n                                            }}\n                                        />\n                                        <i>days\n                                            ago {' '}{!disabled ? `(max:${Math.min(this.state.UPDATE_NORM, item.createdAt)})` : ''}</i>\n                                    </div>\n                                </div>\n                                <div>\n                                    <div>\n                                        <small>Comments</small>\n                                        <input\n                                            disabled={disabled}\n                                            type=\"number\"\n                                            value={item.comments}\n                                            min={0}\n                                            onChange={(e) => {\n                                                this.updateItem(item.id, {\n                                                    comments: parseInt(e.target.value),\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                    <div>\n                                        <small>Reactions</small>\n                                        <input\n                                            disabled={disabled}\n                                            type=\"number\"\n                                            value={item.reactions}\n                                            min={0}\n                                            onChange={(e) => {\n                                                this.updateItem(item.id, {\n                                                    reactions: parseInt(e.target.value),\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </li>\n                    )\n                )}\n            </ol>\n        )\n    }\n\n    render() {\n        const {CREATION_WEIGHT, UPDATE_WEIGHT, TRENDING_WEIGHT} = this.state;\n        const items = Object.values(this.state.items);\n        const itemScores = getItemScores(items, this.state).sort(({totalScore: a}, {totalScore: b}) => b - a)\n        const itemScores_ordered_trending = getItemScores(items, this.state).sort(({totalOrderScore: a}, {totalOrderScore: b}) => b - a)\n\n        return (\n            <div>\n                <h1>Params v0.0.2</h1>\n\n                <div>\n                    {Object.entries(this.state)\n                        .filter(([key]) => this.state.algoParamNames.includes(key))\n                        .map(([key, value], i) => {\n                            return (\n                                <div key={i}>\n                                    {key}\n                                    <input\n                                        step={['REACTIONS_TRENDING_WEIGHT', 'TRENDING_WEIGHT', 'UPDATE_WEIGHT', 'CREATION_WEIGHT'].includes(key) ? 0.1 : 1}\n                                        type=\"number\"\n                                        value={value}\n                                        min={0}\n                                        onChange={(e) => {\n                                            this.updateParam(key, parseFloat(e.target.value));\n                                        }}\n                                    />\n                                </div>\n                            );\n                        })}\n                    <small> Max trending rate: {itemScores.maxTrendingRate.toFixed(3)} <br/></small>\n                    <small>\n                        Total Score = <b>{UPDATE_WEIGHT}</b> * updateScore + <b>{CREATION_WEIGHT} </b>*\n                        creationScore + <b>{TRENDING_WEIGHT}</b> * trendingScore\n                    </small>\n                </div>\n\n\n                <hr/>\n\n                <button onClick={() => {\n                    this.createItems(this.state.itemsCount);\n                }}>Regenerate\n                </button>\n                Items Count\n                <input\n                    type=\"number\"\n                    value={this.state.itemsCount}\n                    min={1}\n                    onChange={(e) => {\n                        this.updateParam('itemsCount', parseFloat(e.target.value));\n                    }}\n                />\n\n                <hr/>\n\n                <div>\n                    <div style={{position: \"fixed\", right: 100}}>\n                        {this.state.selected && itemScores.length\n                            ? this.renderItems([itemScores.find(({item: {id}}) => id === this.state.selected)])\n                            : <li>Select item to edit</li>\n                        }\n                    </div>\n\n                    <Plot\n                        data={[\n                            {\n                                y: itemScores.map(({trendingScore}) => trendingScore.toFixed(3)),\n                                type: 'box',\n                                name: 'Value based trending score',\n                            }, {\n                                y: itemScores.map(({trendingOrderScore}) => trendingOrderScore.toFixed(3)),\n                                type: 'box',\n                                name: 'Order based trending score',\n                            },\n\n                        ]}\n                        layout={{\n                            width: 600, height: 400, title: 'Trending Score distribution', showlegend: true,\n                            xaxis: {\n                                showticklabels: false\n                            },\n                            yaxis: {\n                                dtick: 0.1,\n                            },\n                        }}\n                        config={{displayModeBar: false, editable: false,}}\n                    />\n                    <div className='container'>\n                        <div>\n                            <h2 style={{textAlign: 'center'}}>Value based trending score</h2>\n                            {this.renderItems(itemScores, true)}\n                        </div>\n                        <div>\n                            <h2 style={{textAlign: 'center'}}>Order based trending score</h2>\n                            {this.renderItems(itemScores_ordered_trending, true, true)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Feed} from './Feed';\n\nReactDOM.render(\n  <React.StrictMode>    \n    <Feed />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}