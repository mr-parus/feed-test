{"version":3,"sources":["Feed.js","index.js"],"names":["makeId","length","result","characters","charactersLength","i","charAt","Math","floor","random","Feed","props","state","UPDATE_WEIGHT","CREATION_WEIGHT","TRENDING_WEIGHT","CREATE_NORM","UPDATE_NORM","TRENDING_NORM","REACTIONS_TRENDING_WEIGHT","items","createdAt","this","id","reactions","comments","updatedAt","item","createItem","newItem","name","oldAndTrending","max","Object","values","map","a","setState","selected","createItems","itemId","update","value","maxTrendingRate","trendingRate","getTrendingRate","trendingScore","updateScore","createScore","totalScore","itemScores","className","toFixed","onClick","style","display","justifyContent","type","min","onChange","e","newValue","parseInt","target","updateItem","score","sort","entries","filter","key","includes","updateParam","parseFloat","position","right","renderItems","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.154a4a6d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction makeId(length = 10) {\n    var result = \"\";\n    var characters =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\nexport class Feed extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            UPDATE_WEIGHT: 1,\n            CREATION_WEIGHT: 1,\n            TRENDING_WEIGHT: 1,\n            CREATE_NORM: 15,\n            UPDATE_NORM: 15,\n            TRENDING_NORM: 1000,\n            REACTIONS_TRENDING_WEIGHT: 1 / 5,\n            items: {},\n        };\n    }\n\n    createItem() {\n        const createdAt =  2 + Math.floor(Math.random() * this.state.CREATE_NORM);\n\n        return {\n            id: makeId(),\n            reactions: Math.floor(Math.random() * this.state.CREATE_NORM),\n            comments: Math.floor(Math.random() * this.state.CREATE_NORM),\n            createdAt,\n            updatedAt: Math.floor(Math.random() * createdAt),\n        };\n    }\n\n    createItems() {\n        const items = {};\n\n        for (let i = 1; i < 15; i++) {\n            const item = this.createItem();\n            items[item.id] = item;\n        }\n\n        const newItem = {\n            id: \"New\",\n            reactions: 0,\n            comments: 0,\n            createdAt: 0,\n            updatedAt: 0,\n            name: \"new item\",\n        }\n        items[newItem.id] = newItem;\n\n        const oldAndTrending = {\n            id: \"Trending\",\n            reactions: Math.max(...Object.values(items).map((a) => a.reactions)) + 5,\n            comments: Math.max(...Object.values(items).map((a) => a.comments)) + 5,\n            createdAt: this.state.CREATE_NORM,\n            updatedAt: this.state.UPDATE_NORM,\n            name: \"Old + trending\",\n        }\n        items[oldAndTrending.id] = oldAndTrending;\n\n        this.setState({ items, selected: newItem.id});\n    }\n\n    componentDidMount() {\n        this.createItems()\n    }\n\n    getTrendingRate(item) {\n        const { reactions = 0, comments = 0 } = item;\n        const { TRENDING_NORM, REACTIONS_TRENDING_WEIGHT } = this.state;\n\n        return (reactions + comments * REACTIONS_TRENDING_WEIGHT) / TRENDING_NORM;\n    }\n\n    updateItem(itemId, update) {\n        this.setState({\n            items: {\n                ...this.state.items,\n                [itemId]: {\n                    ...this.state.items[itemId],\n                    ...update,\n                },\n            },\n        });\n    }\n\n    updateParam(name, value) {\n        this.setState({\n            ...this.state,\n            [name]: value,\n        });\n    }\n\n    score(item, maxTrendingRate) {\n        const trendingRate = this.getTrendingRate(item);\n        const result = { item };\n\n        result.trendingScore =\n            trendingRate >= maxTrendingRate\n                ? 1\n                : trendingRate <= 0\n                ? 0\n                : trendingRate / maxTrendingRate;\n\n        const { UPDATE_NORM } = this.state;\n        const { updatedAt } = item;\n        result.updateScore =\n            updatedAt >= UPDATE_NORM\n                ? 0\n                : updatedAt <= 0\n                ? 1\n                : 1 - updatedAt / UPDATE_NORM;\n\n        const { CREATE_NORM } = this.state;\n        const { createdAt } = item;\n        result.createScore =\n            createdAt >= CREATE_NORM\n                ? 0\n                : createdAt <= 0\n                ? 1\n                : 1 - createdAt / CREATE_NORM;\n\n        const { UPDATE_WEIGHT, CREATION_WEIGHT, TRENDING_WEIGHT } = this.state;\n\n        result.totalScore =\n            CREATION_WEIGHT * result.createScore +\n            UPDATE_WEIGHT * result.updateScore +\n            result.trendingScore * TRENDING_WEIGHT;\n\n        return result;\n    }\n\n    renderItems(itemScores) {\n        return (\n            <div>\n                {itemScores.map(\n                    (\n                        { item, totalScore, trendingScore, updateScore, createScore },\n                        i\n                    ) => (\n                        <li key={i} className={item.id === this.state.selected ? \"selected\" : \"\"}>\n                            <h2>\n                                {item.name && <span className=\"name\">[{item.name}]</span>}\n                                TotalScore: {totalScore.toFixed(6)}\n                            </h2>\n                            <h3>Trending Score {trendingScore}</h3>\n                            <h3>Update Score {updateScore}</h3>\n                            <h3>Publish Score {createScore}</h3>\n\n                            {item.id !== this.state.selected\n                                ? (      <button className='selectButton'\n                                                 onClick={() => {\n                                                     this.setState({selected: item.id})\n                                                 }}\n                                >Select</button>)\n                                : null\n                            }\n\n                            <hr/>\n\n                            <div style={{display:'flex', justifyContent:'space-around'}}>\n                                <div>\n                                    <div>\n                                        <small>Created</small>\n                                        <input\n                                            type=\"number\"\n                                            value={item.createdAt}\n                                            min={0}\n                                            onChange={(e) => {\n                                                const newValue = parseInt(e.target.value);\n                                                this.updateItem(item.id, {\n                                                    createdAt: newValue,\n                                                    updatedAt:\n                                                        newValue < item.updatedAt ? newValue : item.updatedAt,\n                                                });\n                                            }}\n                                        />\n                                        <i>days ago</i>\n                                    </div>\n\n                                    <div>\n                                        <small>Updated</small>\n                                        <input\n                                            type=\"number\"\n                                            value={item.updatedAt}\n                                            min={0}\n                                            max={item.createdAt}\n                                            onChange={(e) => {\n                                                this.updateItem(item.id, {\n                                                    updatedAt: parseInt(e.target.value),\n                                                });\n                                            }}\n                                        />\n                                        <i>days ago</i>\n                                    </div>\n                                </div>\n                                <div>\n                                    <div>\n                                        <small>Comments</small>\n                                        <input\n                                            type=\"number\"\n                                            value={item.comments}\n                                            min={0}\n                                            onChange={(e) => {\n                                                this.updateItem(item.id, {\n                                                    comments: parseInt(e.target.value),\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                    <div>\n                                        <small>Reactions</small>\n                                        <input\n                                            type=\"number\"\n                                            value={item.reactions}\n                                            min={0}\n                                            onChange={(e) => {\n                                                this.updateItem(item.id, {\n                                                    reactions: parseInt(e.target.value),\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </li>\n                    )\n                )}\n            </div>\n        )\n    }\n\n    render() {\n        const { CREATION_WEIGHT, UPDATE_WEIGHT, TRENDING_WEIGHT } = this.state;\n        const items =  Object.values(this.state.items);\n        const maxTrendingRate = Math.max(0, ...items.map((i) => this.getTrendingRate(i)));\n        const itemScores = items.map((item) => this.score(item, maxTrendingRate))\n            .sort(({totalScore: a}, {totalScore: b}) => b - a)\n\n\n        return (\n            <div>\n                <h1>Params</h1>\n                {Object.entries(this.state)\n                    .filter(([key]) => ![\"items\", 'selected', 'TRENDING_NORM'].includes(key))\n                    .map(([key, value], i) => {\n                        return (\n                            <div key={i}>\n                                {key}\n                                <input\n                                    type=\"number\"\n                                    value={value}\n                                    min={0}\n                                    onChange={(e) => {\n                                        this.updateParam(key, parseFloat(e.target.value));\n                                    }}\n                                />\n                            </div>\n                        );\n                    })}\n                <small> Max trending rate: {maxTrendingRate.toFixed(3)} <br/></small>\n                <small>\n                    Total Score = <b>{UPDATE_WEIGHT}</b> * updateScore + <b>{CREATION_WEIGHT} </b>*\n                    cteationScore + <b>{TRENDING_WEIGHT}</b> * trendingScore\n                </small>\n                <hr/>\n                <button onClick={() => {this.createItems();}}>Regenerate</button>\n                <hr />\n\n                <div className='container'>\n                    <div style={{position: \"fixed\", right: 100}}>\n                        {this.state.selected\n                            ?this.renderItems([ this.score(this.state.items[this.state.selected], maxTrendingRate)])\n                            : <li>Select item to edit</li>}\n                    </div>\n                    {this.renderItems(itemScores)}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Feed} from './Feed';\n\nReactDOM.render(\n  <React.StrictMode>    \n    <Feed />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}